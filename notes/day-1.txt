https://github.com/joydip-git/angular-siemens-14thoct2024


Roadmap to Angular:
-----------------------------
JavaScript and TypeScript
Node JS

Angular


S/W required:
----------------------
Node JS
VS Code


JS engines:
-------------------
chrome: v8 
safari: JS Core (nitro)
firefox: Spidermonkey
edge: chromium

JS Execution:
--------------------
1. prepration stage
2. Execution stage

Ryan Dahl => Node JS (a runtime built at the top of V8 JS engine)

ECMA => ECMAScript (ES)

2015 6.0 => let and const keywords
2024 

JS disadvantages:
--------------------------
1. no static type checking
2. no strict typing

TypeScript:
----------------------------------
1. static type checking
2. strict typing

transpilation:
a. JS (ES6+) => Vanilla JS (<ES6)
b. TS (code ES6+) => Vanilla JS  (<es6)

transpiler tool: 
a. JS (ES6+) => Vanilla JS (<ES6)
	babel 
b. TS (code ES6+) => Vanilla JS  (<es6)
	typescript compiler (tsc)



package installation:
tool: NPM, bower, yarn etc.

package.json file creation:
---------------------------------
1. manually
2. using npm tool
	> npm init [--yes]


global installation:
>npm i <package-name> --location=global
directory: C:\Users\<user-name>\AppData\Roaming\npm

local installation:
app-dir>npm i <package-name>

TS extra data types:
any, unknown, Partial, Optional etc.

To create tsconfig.json file 
1. manually
2. command of tsc => >tsc --init


Modules in JS:
-------------------------------
a. common js module format: (default format for Node JS)
export: module.exports = {prop1:member1, prop2: member2,....}
import: const m = require('module-name')

b. asynchronous module definition (amd) format 
define([],function(){ })

c. universal module definition (umd) format:
-------------------------------------------------
require([], function(){})

d. ES6 module definition format:
------------------------------------------
export: export member
import: import {} from 'module-name'

module loader:
------------------------
common js module lodaer,
require js (understands ONLY amd format),
system js etc.






























