asynchronity and Promise API

Angular:
----------------------------------------
1. Single Page Application
2. Client-side UI development framework
3. application is created based on series of components
4. component is a single unit containing view (design/template) and correspoding code
5. provides nice syntaxes to pas data to and from view to code easily
6. powerful DI framework
7. separation of logic
8. client-side framework
9. easy ways to interact with form
10. nice technique to extend the behavior of existing HTML tags by introducing directives

Angular CLI: (Ng)
----------------------------------------
tool to create and manage angular application
global installation:
> npm i @angular/cli --location=global

rxjs => Reactive Extensions to JS

Component:
	a. code (*.ts)		=> header.component.ts
	b. view (*.html)		=> header.component.html
	c. style (*.css)		=> header.component.css
	d. metadata


angular assets:
-------------------------
1. component			=> @Component()				@angular/core
2. directive			=> @Directive()
3. pipes					=> @Pipe()
4. service				=> @Injectable()			
5. module				=> @NgModule()


binding:
-------------------
a. passing data from code to the view/template: data binding
i. title="" 			<h2>{{title}}</h2> => interpolation
	
ii. [] => property binding
	width=300			<input type='text' [style.width.px]="width" [value]="title">

b. passing data from view/template to the code: event-binding
	<button (click)="clicked(100)">Click</button>
	class SomeComponent{
		clicked(data:number){
		}
	}


@Directive({
	selector:'[ngModel]',
	...
})
export class NgModelDirective{
	(valueChanged):EventEmitter<any>
	[value]
}

[(ngModel)]

@NgModule({
	declarations:[NgModelDirective],
	exports:[NgModelDirective]
})
export class FormsModule{}


@Directive({
	selector:'[ngFor]',
	...
})
export class NgForDirective{
	
}

@NgModule({
	declarations:[NgForDirective],
	exports:[NgForDirective]
})
export class CommonModule{}


@NgModule({
	imports:[CommonModule],
	exports:[CommonModule]
})
export class BroswerModule{}


directives:

a. attribute directive => extends the behavior of an existing element
	ngModel

b. structural directive => manipulates DOM
	ngIf, ngIfElse, ngFor, ngSwitch etc.

c. component directive (only directive with design)


































