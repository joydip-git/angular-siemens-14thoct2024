pipe


@Pipe({
	name:'productsort'
})
class ProductSortPipe implements PipeTransform{
	transform(data:Product[],...args:string[]):Product[]{
		return data
	}
}



template:

{{ data | uppercase }}
{{ (price | currency :'USD':'0-2')|uppercase }}

=> new CurrencyPipe().transform(price,'USD','0-2')

a. manual
1. create a pipe file => x.pipe.ts
2. create a class => XPipe
3. use @Pipe() decorator (from @angular/core)
	assign pipe name through "name" property 
4. implement the interface PipeTransform (from @angular/core)in the class 
5. change the data types of the transform method arguments from "any" to appropriate type
6. write code for the method
7. register the pipe with module


b. using ng g command
>ng g p products/pipes/product-filter 

1. change the data types of the transform method arguments from "any" to appropriate type
2. write code for the method


<tr *ngFor="let p of (products|sortproduct:choice)|filterproduct:<value-from-txtbox>">
</tr>


const arr = selectInput.options
const selectedOption = arr[selectInput.selectedIndex]
selectedOption.text/value

selectInput.options[selectInput.selectedIndex].value/text


passing data between components
nested components
----------------------
1. if shallow nesting
	i. from nested to parent
	ii. from parent to nested
	
2. if deep nesting

non-nested components
3. if not nested at all (or routed components)

<app-sort>
</app-sort>

<app-filter>
</app-filter>

br

<app-product-list>
</app-product-list>






	