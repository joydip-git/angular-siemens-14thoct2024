service:
----------------------------------------------------
	a class with methods containing reusable piece of logic, common sharable data etc.

Part-1:

1. create service:
--------------------------------------
file=>some.service.ts

@Injectable({
	providedIn:'root'
})
export class SomeService{
	getData():string{
		return 'data';
	}
}


>ng g s <path>/<service-name>

2. register service: (for DI of the service)
-------------------------------------------------
a. asset level: is just an asset (such as, a component) needs DI?
Register at the asset level ONLY. 
Angular creates a single instance to be used ONLY by that asset. No one else can share that instance.

b. feature module level: is the instance of service going to be used by multiple assets of a feature module? 
Regsiter at the feature module level. 
Angular will create a single instance of the service and any asset of this feature module ONLY can share that instance of the service. No other module can share that instance.

app.module.ts

	products.module.ts  
			@NgModule({ providers:[DataService], imports:[], declarations:[],})
		pipes
		components		

	app-common.module.ts

c. application level: is the instance of service going to be used by multiple assets in the entire application acrosss multiple feature modules? 
Regsiter at the root module level. 
Angular will create a single instance of the service for entire application and any asset of multiple feature modules can share that instance of the service.

app.module.ts
	@NgModule({ providers:[DataService], imports:[], declarations:[],})

	products.module.ts  			
		pipes
		components		

	app-common.module.ts
		components

Part-2:
-----------------------------
provider => is the one who provides (suuplies) information (metadata) about a service to angular DI framework and based on that an instance of the service is created, which then is injected in the dependent party (e.g. component) by Angular "Injector"

Injector: Angular maintains separate injectors for different level - 
	asset level, 
	feature module and 
	application level


a type with following properties
	a. provide (assign token value to it)
	b. useValue
	c. useClass
	d. useExisting
	e. useFactory
	.....

provider => 
	token:a value (string/class) 
	service: service related to that token

token (DataService) => sevice class (DataService)

prvider configuration =>
------------------------------------
providers:[
	{
      provide: 'DATA_SERVICE',
      useClass: DataService
	},
	TitleService => {provide: TitleService, useClass:TitleService }
]


service consumption/DI:
-----------------------------------
constructor(@Inject('DATA_SERVICE') svc: DataService)

=> @Inject('DATA_SERVICE') tells angular to look for a provider token, by the name 'DATA_SERVICE' and create an object of the service class linked with that token and then inject (pass/assign) the reference of the service class object to the constructor argument "svc"

Note: @Inject() decorator is used with constructor parameter, NOT with data member of the class

constructor(private titleSvc: TitleService)
=> tells angular to look for a provider token, by the name TitleService itself and create an object of the service class linked with that token and then inject (pass/assign) the reference of the service class object to the constructor argument "titleSvc"

role of interface:
constructor(@Inject('DATA_SERVICE') private svc: ServiceContract)
=> tells angular to look for a provider token, by the name 'DATA_SERVICE' and create an object of the service class (which implements ServiceContract interface) linked with that token and then inject (pass/assign) the reference of the service class object to the constructor argument "svc".

	
Part-3:
-----------------------
@Injectable() 
what it is? 
=> Decorator that marks a class as available to be provided and injected as a dependency.

Marking a class with @Injectable ensures that the compiler will generate the necessary metadata to create the class's dependencies when the class is injected.

the @Injectable() tells angular to find out and extract metadata about the dependencies of the current class (on which @Injectable() has been used) and create instance(s) of the dependency(cies) first, inject them in the current class constructor and then create the instance of the current class

according to this, any class (no matter whether it is a component, directive, pipe, service, module etc.) who has dependencies MUST be declared with @Injectable() decorator.

In case of component, directive, pipe and module, coincidentally, you use @Component(), @Directive(), @Pipe() and @NgModule() decorators and all of those decoartors do automatically implement @Injectable()

But @Injectable() is explicitly needs to be declared at the top of the service class, since no explicit decorator is used at the top of service classs

best practice: to maintain uniformity, always decorate service with @Injectable

errors:
you forgot to register the service =>

NullInjectorError: R3InjectorError(_AppModule)[DataService -> DataService]: 
  NullInjectorError: No provider for DataService!

you forgot to use @Injectable() with service class, which has other dependencies =>

[ERROR] TS-992005: The class 'DataService' cannot be created via dependency injection, as it does not have an Angular decorator. This will result in an error at runtime.
Either add the @Injectable() decorator to 'DataService', or configure a different provider (such as a provider with 'useFactory').


Lifecycle of components:
---------------------------------
	//one time data fetching
	ngOnInit(){
		this.ps.getAll()
	}

	productdetail => details of a product
	productId => send request to backend with that productId every time and fetch different product details every time

	//repeated data fetching in nested component
	ngOnChanges(){
		this.ps.get(productId)
	}

	creation phase:
	a. constructor() => initialize all the properties of the class with default or some static data. DO NOT initialize properties of the class with any asynchronously fetched data (sending request to backend API server, or from file, or by sending request through websocket) in the constructor

	b.	changes => a nested component recevies data from its parent using @Input() properties, immediately after constructor execution and that's when this event gets fired. gets fired every time the nested gets updated data from parent via @Input() properties.

	c. init => this event gets fired immediately after the change event. this event gets fired ONLY ONE TIME during the lifecycle of the component (till the destruction)

	update phase:
	a. changes:if the data in the parent is updated and again that fresh data in received via @Input() propery by nested, immediately the change event will take place again

	destruction phase
	a. destroy

to write code while those events take place, you have to write specific event handlers in the component class code. those specific event handlers are known as 'hooks'. These are the following hooks

event name				interface name			method/hook name
----------------------------------------------------------
	X							OnX							ngOnX

	changes					OnChanges					ngOnChanges
	init						OnInit						ngOnInit
	destroy					OnDestroy					ngOnDestroy


HTTP requests:
---------------------------------------
built-in service class: HttpClient
built-in module: HttpClientModule (deprecated)
use provideHttpClient() method instead

provideHttpClient() => Configures Angular's HttpClient service to be available for injection. By default, HttpClient will be configured for injection with its default options for XSRF protection of outgoing requests

providers: [
    provideHttpClient(),
    {
      provide: 'POST_SERVICE_TOKEN',
      useClass: PostService
    }
  ]



HttpClient class methods:
a. fetch record(s): get() => send HTTP request with 'GET' method
Constructs a GET request that interprets the body as JSON and returns the response body as an object parsed from JSON.

a. insert new record: post() => send HTTP request with 'POST' method
a. update existing record: put() => send HTTP request with 'PUT' method
a. delete existing record: delete() => send HTTP request with 'DELETE' method


all methods are asynchronous and returns "Observable" object (quite similar to Promise)

Observable object is supplied by 'rxjs' package
in order to receive data in component or anywhere else, subscribe to the observable, so when the observable receives data, the component will also receive data

to subscribe to an observable, you need to call the subscribe() and pass an object with maximum three callbacks. this object is known as observer object. the job of observer is to observe the subscribed observable.
Note: complete callback nevers gets invoked when error happens. 










