product-service-backend response:

get all products
----------------------------------------------------------------
url: http://localhost:3003/products      
HTTP Method: GET
Request data: NA
Response: { "message":"records found", "data":[{},{},{},...] }


get a product
----------------------------------------------------------------
url: http://localhost:3003/products/<id-of-product>      
HTTP Method: GET
Request data: id-of-product
Response: { "message":"record found", "data":{} }

error: incorrect id of product
Response: { "message":"no record found", "data":null }


add a product
----------------------------------------------------------------
url: http://localhost:3003/products      
HTTP Method: POST
Request data: product object (as part of request body)
Response: { "message":"product added", "data":[{},{},...] }

error: product already exists
Response: { "message":"could not add", "data":null }


update a product
----------------------------------------------------------------
url: http://localhost:3003/products/<id-of-product-to-update>      
HTTP Method: PUT
Request data: 
	1. updated product object (as part of request body)
	2. id-of-product-to-update (as part of the URL)

Response: { "message":"product updated", "data":[{},{},...] }

error: product doesn't exist (incorrect product id)
Response: { "message":"could not update", "data":null }


delete a product
----------------------------------------------------------------
url: http://localhost:3003/products/<id-of-product-to-delete>      
HTTP Method: DELETE
Request data: 
	1. id-of-product-to-delete (as part of the URL)

Response: { "message":"product deleted", "data":[{},{},...] }

error: product doesn't exist (incorrect product id)
Response: { "message":"could not delete", "data":null }


possible responses:

{ "message":"<success/failure message>", "data":array-of-products|single-product|null }


packages:
---------------------------------
@angular/core => decrators (@Component, ...), interfaces (OnInit, PipeTransform)
@angular/common => majority of structural directives 
@angular/common/http => HttpClient, provideHttpClient()
@angular/forms => FormsModule, ngModel
@angular/platform-browser => BroswerModule
@angular/platform-browser-dynamic => platfromBrowserDynamic() => creates Platform for angular app
@angular/router => 

rxjs => Observbale, Subscription etc.



Routing:
-------------------------------------------------
Angular provides you client-side routing facility

package: @angular/router
module: RouterModule

built-in types:
--------------------------
Route => 
	const pccRoute = {path:'products', component:ProductContainerComponent}
	const apcRoute = {path:'products/add', component:AddProductComponent}


	const routes:Route[] = [pccRoute, apcRoute]
	or
	const routes:Routes = [pccRoute, apcRoute] (Routes => Route[])

	register the routes variable with RouterModule
	imports:[ RouterModule.forChild/forRoot(routeArray)]

ActivatedRouteSnapshot => represents current state of the activated route

built-in components:
------------------------------
<router-outlet></...> => outlet for the router to render the component dynamically based on route

this should be in a bootstrapper component or some other component which is nested in the bootstrapper component

where to do the routing configuration???
------------------------------------------------------
A. if you have feature modules in your application and you want to create routes for different components of those different feature modules, then create routing configuration in individual feature module file

B. if you DO NOT have feature modules in your application, then create routes in root module file

create routing configuration in the feature (A) or root (B) module file directly
register the routes with RouterModule.forRoot/forChild() in the module file => 
imports:[ RouterModule.forChild/forRoot(routeArray)]
or

create separate module file for routing (module-name-routing.module.ts)
register the routes with RouterModule.forRoot/forChild() in the module file =>
imports:[ RouterModule.forChild/forRoot(routeArray)]

regsiter that small routing module file with feature/root module file (module-name.module.ts) in the imports array => imports:[SampleRoutingModule]


built-in directives:
-------------------------------
routerLink => attribute directive, used like an attribute.
helps you navigate to a view, without reloading the application. additionally, when used as an attribute of <a> or <input type='submit'>, it suppresses the default behavior of them, which is to submit the view back to the server. (suppresses server side routing)

//passing an array of strings containing path fragments
routerLink="['posts','add']" => "http://localhost:4200/posts/add"

//passing a complee path as string
routerLink="/home"					=> "http://localhost:4200/home"

data-binding to a component property (id)
[routerLink]="['posts','update',id]" => "http://localhost:4200/posts/update/1"

built-in services:
--------------------------
1. ActivatedRoute => represents the complete information about the current route that is "activated" (being navigated), such as- which component is present in outlet, any data has been passed as route parameter or query string etc. 

2. RouterState => state of router. consists of a tree of ActivatedRoute objects.

3. Router => represents the router itself


Form data handling:
-------------------------------
a. template-driven: 
everything is controlled from template/view using directives, such as ngModel, ngForm etc.
you don't have any direct access to the FormControl, FormGroup etc. objects
the data passing is asynchronous
hard to unit test
no reusability
used in forms with small amount of data

directives: ngModel, ngForm etc.
classes: FormGroup, FormControl etc.
module: FormsModule
package: @angular/forms


b. reactive form:
everything is controlled from code. there is no need of ngModel, ngForm etc.
you have direct access to the FormControl, FormGroup etc. objects
the data passing is synchronous
easy to unit test
reusability
used in forms with large amount of data

directives: formControl, formControlName, formGroup, formGroupName etc.
module: ReactiveFormsModule
package: @angular/forms

