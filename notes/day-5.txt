product-service-backend response:

get all products
----------------------------------------------------------------
url: http://localhost:3003/products      
HTTP Method: GET
Request data: NA
Response: { "message":"records found", "data":[{},{},{},...] }


get a product
----------------------------------------------------------------
url: http://localhost:3003/products/<id-of-product>      
HTTP Method: GET
Request data: id-of-product
Response: { "message":"record found", "data":{} }

error: incorrect id of product
Response: { "message":"no record found", "data":null }


add a product
----------------------------------------------------------------
url: http://localhost:3003/products      
HTTP Method: POST
Request data: product object (as part of request body)
Response: { "message":"product added", "data":[{},{},...] }

error: product already exists
Response: { "message":"could not add", "data":null }


update a product
----------------------------------------------------------------
url: http://localhost:3003/products/<id-of-product-to-update>      
HTTP Method: PUT
Request data: 
	1. updated product object (as part of request body)
	2. id-of-product-to-update (as part of the URL)

Response: { "message":"product updated", "data":[{},{},...] }

error: product doesn't exist (incorrect product id)
Response: { "message":"could not update", "data":null }


delete a product
----------------------------------------------------------------
url: http://localhost:3003/products/<id-of-product-to-delete>      
HTTP Method: DELETE
Request data: 
	1. id-of-product-to-delete (as part of the URL)

Response: { "message":"product deleted", "data":[{},{},...] }

error: product doesn't exist (incorrect product id)
Response: { "message":"could not delete", "data":null }


possible responses:

{ "message":"<success/failure message>", "data":array-of-products|single-product|null }


packages:
---------------------------------
@angular/core => decrators (@Component, ...), interfaces (OnInit, PipeTransform)
@angular/common => majority of structural directives 
@angular/common/http => HttpClient, provideHttpClient()
@angular/forms => FormsModule, ngModel
@angular/platform-browser => BroswerModule
@angular/platform-browser-dynamic => platfromBrowserDynamic() => creates Platform for angular app
@angular/router => 

rxjs => Observbale, Subscription etc.



Routing:
-------------------------------------------------
Angular provides you client-side routing facility

package: @angular/router
module: RouterModule

built-in types:
--------------------------
Route => 
	const pccRoute = {path:'products', component:ProductContainerComponent}
	const apcRoute = {path:'products/add', component:AddProductComponent}
Routes => Route[]

	const routes:Route[] = [pccRoute, apcRoute]

some module file and register the routes variable 

imports:[ RouterModule.forChild/forRoot(routeArray)]

built-in components:
------------------------------
<router-outlet></...>

where to do the routing configuration???
------------------------------------------------------
A. if you have feature modules in your application and you want to create routes for different components of those different feature modules, then create routing configuration in individual feature module file

B. if you DO NOT have feature modules in your application, then create routes in roo t module file

create routing configuration in the feature (A) or root (B) module file directly
register the routes with RouterModule.forRoot/forChild() in the module file

or

create separate module file for routing (module-name-routing.module.ts)
register the routes with RouterModule.forRoot/forChild() in the module file
regsiter that small routing module file with feature/root module file (module-name.module.ts) in the imports:[] array

products/categories/mobile/samsung/1
products/categories/mobile/samsung/2

products/categories/mobile/iphone/12






