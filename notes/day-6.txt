authentication and navigation
testing
hosting angular in wpf using webview2

{ "message":"", "data":[{},{},..]|{}|null }

ApiResponse<TData> => 
message:string, 
data:TData|null

http.get<ApiResponse<Product[]>>(url)

{ "message":"", "data":{} }
http.get<ApiResponse<Product>>(url+'/'+id)

Service and DI:
-----------------------
create the service
decorate with @Injectable()
regsiter a provider for the service, with angular

providers:[
	//1.A.
	//ProductService,
	//1.B.
	{
	  provide: ProductService, <= token
	  useClass:ProductService  <= service type
	},

	//2.
	{
		token:'P_S_TOKEN',
		useClass:ProductService
	}
]

token => service

1.A and B.
constructor(private ps:ProductService){}

2.
private ps:ProductService;
constructor(@Inject('P_S_TOKEN') ps:ProductService){ this.ps = ps; }

3. loose coupling
interface ServiceContract<TModel> {}

private ps:ServiceContract<Product> ;
constructor(@Inject('P_S_TOKEN') ps:ServiceContract<TModel> ){ 
	this.ps = ps; 
}


@Inject =>  decorator [applied on an argument of a method]
inject() => method

HttpClient => built-in service class and its provider is registered with HttpClientModule (built-in)
hence you need to import this module (older versions and depricated)

hence you need to call the provideHttpClient() method to get service provider of the HttpClient class (latest)

@Injectable() => when angular tries to create an instance of a class, if that class has some other dependency, angular needs to extract information (metadata) about that dependency. for this reason the main service class must be decorated with @Injectable()

RxJS => Reactive Extensions to JavaScript
APIs for asynchronous programming in Angular, such async data fetch from backend API server, async data fetch from file, async web socket request, async event triggering,....


HttpClient methods => send HTTP requests to the backend asynchronously
		      i.e., the method calls do not wait for the response, hence they do not block the main (single) JS thread
		      these methods uses Observable oject (from RxJS) which stores the response in near future and over the time

other parties who are using service class methods, that return Observable, must subscribe to that Observable
	while subscribing to the observable one must pass an object to that method as an argument, which is known as Observer object. this actually is collection of 3 (max and optional) properties, each refering to a callback method. these properties are - next, error and complete
next callback => is invoked when observable gets proper response
error callback => is invoked when observable gets error response
complete callback => is invoked after next callback, so that you can perform other asyn/sync operations after you have received proper response

imports {PipeTransform, Pipe} from '@angular/core'

@Pipe({ name:'uppercase'})
class UppercasePipe implememts PipeTransform{
	transform(value:string, ...args:any[]){
		return value.toLocaleUpperCase()
	}
}

@Pipe({ name:'currency'})
class CurrencyPipe implememts PipeTransform{
	transform(value:string, ...args:any[]){
		return value.toLocaleUpperCase()
	}
}

@NgModule({
	providers:[],
	declarations:[UpperCasePipe,CurrencyPipe, SampleComponent]
})


view/template:
{{	name|uppercase	}}
{{	price|currency:'INR':0:'': }}

Navigation in Angular - aka Agular Routing:
-------------------------------------------------
client-side routing
1. create a route: 
	feature module specific
2. regsiter the routes you created
3. create an outlet for the routed components to be rendered dynamically when route changes

package: @angular/router
module: RouterModule
static methods of RouterModule =>
a. forChild => 
Creates a module with all the router directives and a provider registering routes, without creating a new Router service. 
When registering for submodules and lazy-loaded submodules use this method.

b. forRoot => [use it in the root module]
Creates and configures a module with all the router providers and directives. 
Optionally sets up an application listener to perform an initial navigation.

A. simple types: Route, Routes (Route[]), Params

Route => path:string and component:<typeof cmponent>|ComponentName
static path: 'products'
part-dyanmic: 'products/:id/category/:name' => {id:'1', name:''} => Params object => collection of route parameters and their values as key-value pair
Angular creates separate Params obejct for every route, so different routes can use same route parameter name

B. built-in service: Router, ActivatedRoute, RouterState

C. built-in directives: router-outlet (Compoment directive), routerLink (attribute directive)

path match startegy: full or prefix (default)
-------------------------------------------------------
By default, the router checks URL elements from the left to see if the URL matches a given path and stops when there is a config match. 
Importantly there must still be a config match for each segment of the URL. 
For example, '/team/11/user' matches the prefix 'team/:id' if one of the route's children matches the segment 'user'. 
That is, the URL '/team/11/user' matches the config {path: 'team/:id', children: [{path: ':user', component: User}]} but does not match when there are no children as in {path: 'team/:id', component: Team}.
The path-match strategy 'full' matches against the entire URL. 
It is important to do this when redirecting empty-path routes. 
Otherwise, because an empty path is a prefix of any URL, the router would apply the redirect even when navigating to the redirect destination, creating an endless loop.



Nested Components:
AppComponent => DashBoard + ProductContainer [ProductFilter+ProductSorting+ProductList]

Routed Components:

[base url => http://localhost:4200/]
Bootstarpper component (root component) AppComponent [=> DashBoard]

navigation of product components:
------------------------------------------
1. when you click the Products link on the dashboard
http://localhost:4200/products => ProductContainer [ProductFilter+ProductSorting+ProductList]

2. when you click on an image of any product displayed in the table in ProductList component
http://localhost:4200/products/id => ProductDetail (single product detail in full)

3. when you click on an edit button in ProductDetail component
http://localhost:4200/products/update/id => UpdateProduct

4. when you click the update button on the UpdateProduct component, after entering updated details, you will be rediected to 'http://localhost:4200/products' url, if the product is successfully updated, else you will remain at the same url

5. when you click the Add Product link on the dashboard
http://localhost:4200/products/add => AddProduct


navigation of common components:
------------------------------------------------------
6. when you click the Home link on the dashboard
http://localhost:4200/home => Home

7. when the application is loaded initially instead of the base url (http://localhost:4200/) you will be automatically rediected to 'http://localhost:4200/home' url

8. if any URL apart from the above mentioned URLs are requested you will be shown 'requested resource not found' (through a component) and url will look like 
http://localhost:4200/pagenotfound => PageNotFound


		      







